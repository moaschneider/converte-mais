MELHORIAS CONVERTE MAIS
- Fix: ctrl + z não funciona após uso de atalhos
- Add: âncoras que levam de volta pro topo
- Add: clicar no botão e incluir texto do botão no prompt
- Fix: <table> lista dentro de colspan em tabela (testar rowspan)
- Fix: <ul> e <ol> colocar tabela, imagens e listas dentro de listas
- Add: texto em duas colunas (<div style="column-count: 2; column-gap: 20px; text-align: center; white-space: pre-wrap;">)
- Update: melhorar lista das imagens usadas (idéias: botão que abre popup/janela, dois cliques abre a foto em uma nova aba)
- Add: possibilidade de editar o html direto
- Add: escape para tags html
- Fix: <br> em títulos
- Fix: <strong> e <em> em legenda de foto
- Add: botão para mandar sugestão
- Add: carregar o pdf a ser convertido dentro da ferramenta
- Add: botão para converter bullets "•" ou "-" em (ul)
- Add: botão "TEXTO PARA QUESTÕES" (sem fotos, sem referências)

- Update: inserir âncoras nas palavras proibidas para que possa clicar e levar até o ponto onde deve ser feito a edição
- Update: <table> inserir título (legenda?) de tabela
- Add: textarea secundário para "fixar" as referências e o "material baseado em" 





FEITOOOOO:

18/09: 
- Colocar <p><br></p> automático após tabela
- Inserir <hr>

25/09:
- Mudança dos atalhos de "ctrl" para "alt"

27/09:
- Colocar quebra de linha <br> dentro de tabela
- Melhorar o exemplo quando digita o atalho de tabela (ctrl + b)

30/09:
- Add funcionalidade blockquote
- Marcação de palavras proibidas e números juntos de unidades (200mm, 3kg)
- Atalho para blockquote (alt + k) e atalho secreto para parágrafo com quebra de linha (ctrl + alt + s)

01/10
- Melhorar o CSS para parecer o do Aprenda Mais
- Colocar a opção <p><br></p>
- Negrito não funciona dentro de blockquote

02/10:
- Selecionar texto e aplicar blockquote e table
- Palavras proibidas funcionando dentro de blockquote

03/10:
- Colocar número da imagem automaticamente
- Palavras proibidas em legenda de imagem e descrição de imagem
- No código html está ficando as quebras de linha

07/10:
- Palavras proibidas não funciona dentro de título
- Atalho para (th) e (th). (th) -> alt + h || (th): -> alt + j
- Atalho para "Gerar" -> ctrl + enter.

08/10:
- Lista está funcionando dentro de tabela (não em colspan)
- Add <sub> e <sup>
- Fix <p><br></p> duplicado
- Fix <pre>

09/10:
- Add incluir foto e url da foto valendo
- Fix css <sup> e <sub>
- Add: criar lista das imagens usadas e copiar a URL clicando em cima da foto

13/10:
- Add: implementei object para atalhos (ver em "const atalhos")
- Add: <table> implementei solução para não quebrar frase dentro de célula de tabela (ver "// Insere tag <pre>" dentro de converteInlineTags())
- Update: <ol> - atalho para "a.", "A.", "i.", "I." e "01.".

14/10:
- Update: <code> e <pre> criar um marcador para um bloco de código (ver "teste-pre-code.html")

24/10:
- Update: <ul> e <ol> Capitalizar a primeira letra da frase
- Add: buscador de hífen (para palavras hifenizadas que ficam quebradas)

31/10:
- Update: <img> imagens de marcação no formato png que são copiadas para o arquivo texto
- Update: <table> desabilitei a solução para não quebrar frase dentro de célula de tabela (feito no dia 13/10) por conta da questão que é uma tag <span>



VANTAGENS:
- Elimina espaços e quebras de texto excessivas;
- Inclui automaticamente padrões de espaçamento (<p><br></p> após imagens e tabelas e antes de títulos);
- Inclui automaticamente padrões de alinhamento (centraliza imagens, tabelas);
- Destaca palavras proibidas, perguntas retóricas e ausência de espaçamento entre números e unidades;
- Converte tabelas com todas as funcionalidades (formatação de cabeçalho (th), centralização de conteúdo (colocar dois pontos ":" no início do texto da célula), colspan, rowspan, lista dentro de célula);
- Converte listas ordenadas (ol) e não ordenadas (ul);
- Converte a primeira letra do item de lista em maiúscula;
- Inclui automaticamente imagem (img), recomendo usar o atalho "Alt + I";
- Inclui automaticamente numeração de imagens (não precisa fazer nada, ao clicar em "Gerar" ele identifica todas as imagens e numera automaticamente);
- No final da página inclui a lista das imagens usadas no curso e, ao clicar em cima delas, o endereço (URL) já é copiado para a área de transferência;
- Inclui recuo de citação (blockquote) recomendo usar o atalho "Alt + K";
- Inclui quebra de linha (br) atalho "Alt + Q";
- Inclui linha (linha) atalho "Alt + L";
- Inclui negrito (st) atalho "Alt + X";
- Inclui itálico (em) atalho "Alt + Z";
- Gera conteúdo para ser colado no DOCS usando botão "COPIAR TEXTO";
- Gera html para ser colado no Moodle usando botão "COPIAR HTML";
- Salva automaticamente no local storage, ou seja, se der um reload/F5, se fechar a janela, se desligar o computador, o texto permanece na janela.
- Inclui funções sobrescrito, superscrito, <pre>, <code> e <pre><code> para blocos de código



LISTA ATALHOS:
(precode) - ALT + SHIFT + C
(code) - ALT + C
(pre) - ALT + P
(th) - ALT + H 
(th): - ALT + J
(ol) - ALT + F
(ul) - ALT + D
(p) - ALT + S
(linha) - ALT + L
(st) - ALT + X
(em) - ALT + Z

(blockquote) - ALT + K
(table) - ALT + B
(p) + quebra de linha - CTRL + ALT + S
substitui bullets "•" e hífens "-" por (ul) - CTRL + ALT + D
substitui "1.", "1-", "1)" por (ol) - CTRL + ALT + F









 ### Instruções do Converte Mais 1.0  ### (p)

(p)(br)(p)(p)(br)(p)

Essa é uma ferramenta projetada para auxiliar na conversão dos cadernos temáticos tanto para o formato de texto corrido (*plain text*) como para html. A ideia surgiu para auxiliar em algumas tarefas repetitivas que poderiam ser automatizadas, como:(p)

(ul)Eliminação       de espaços e      quebras de linhas

 excessivas; (ul) Separação de números e unidades de medida como 2m ou 30ºC; (ul)Evitar perguntas retóricas (sabe quais são,   certo?); (ul)Evitar o uso algumas palavras como "aluno" ou "aluna"; (ul)Padronizar espaçamentos; (ul)Padronizar a inserção de imagens.(p)

Posteriormente outras tarefas também foram adicionadas a ferramenta como:(p)

 #####  Inserção de tabela ##### (p)

(p)(table)
(th):Tabelas com todas as funcionalidades necessárias (colspan=3);;
Mesclagem horizontal ;
E células de cabeçalho;
Como na linha acima;;
Mas também (ul)Listas (ul)**Negrito** (ul)*Itálico* (ul)Alertas de erros? ;
:Textos centralizados;
E mesclagem vertical (rowspan=2);;
A tabela já fica centralizada;
E com as bordas corretas ;
(table)(p)

 ##### Inserção de imagens ##### (p)

(p) (img) LEGENDA | FONTE | DESCRIÇÃO (p)














 ###  Instruções para usar o Converte Mais ###

(p)O conversor usa marcadores para fazer a conversão para tags html.

(p)É só colocar a tag html porém entre parênteses. Simples.

(p)O marcador "p" entre parênteses é um parágrafo, como você já deve ter percebido.(p)

(ul)O marcador "ul" é uma lista não ordenada.
(ul)Que são aquelas listas com uma bolinha/bullet na frente dos itens.
(ul)Ela também pode ser acessada com a tecla de atalho "Alt + D".

(p)Ah, quando você mudar de marcador, você deve sempre colocar antes um "p", tipo assim => (p)

(ol)O marcador "ol" é uma lista ordenada.
(ol)Que são aquelas que são numeradas em ordem sequencial.(p)

(code)apenas um teste de código(p)
(code)outro código(p)
(code)outro código(p)

(p)testezinho(p)

(ol)lkjlkjl
(ol)lkjlkjl
(ol)sldkfjslkfjs

(p)





// Função que permite inserir o conteúdo associado ao clique de um botão no local onde estiver o cursor no textarea
function insertTextAtCursor(text) {
    // Verifica se o comando 'insertText' é suportado
    if (document.execCommand) {
        textarea.focus(); // Garante que o textarea tenha foco
        document.execCommand('insertText', false, text);
    } else {
        // Fallback caso 'execCommand' não seja suportado
        const startPos = textarea.selectionStart;
        const endPos = textarea.selectionEnd;

        // Insere o texto na posição atual do cursor
        const beforeText = textarea.value.substring(0, startPos);
        const afterText = textarea.value.substring(endPos, textarea.value.length);
        textarea.value = beforeText + text + afterText;

        // Reposiciona o cursor após o texto inserido
        textarea.selectionStart = textarea.selectionEnd = startPos + text.length;

        textarea.focus(); // Foco de volta para a área de texto
    }
}



#################################
##### SALVAR NO GOOGLE DOCS #####
#################################

Sim, é possível implementar a funcionalidade de salvar o conteúdo de um `textarea` diretamente em um arquivo no Google Docs, utilizando a API do Google Drive e Google Docs. No entanto, o processo requer a autenticação do usuário e permissões para acessar sua conta do Google.

Aqui está um resumo dos passos que você precisaria seguir para implementar essa funcionalidade:

### 1. Habilitar a API do Google Drive e Google Docs
Primeiro, é necessário habilitar as APIs do Google Drive e do Google Docs no console de desenvolvedores do Google.

- Acesse o [Google Cloud Console](https://console.cloud.google.com/).
- Crie um novo projeto ou use um existente.
- No menu “APIs e Serviços”, habilite a **Google Drive API** e a **Google Docs API**.
- Crie credenciais OAuth 2.0 para autenticar o acesso ao Google Drive e Docs.

### 2. Autenticação com OAuth 2.0
Você precisará autenticar os usuários para que possam acessar suas contas do Google e criar ou modificar documentos no Google Docs.

Utilize a biblioteca **Google API JavaScript Client** para facilitar a autenticação e o acesso à API.

Inclua o seguinte script em seu HTML para carregar a biblioteca Google API:
```html
<script async defer src="https://apis.google.com/js/api.js"></script>
```

Em seguida, você precisará de uma função JavaScript para inicializar a autenticação e pedir permissões ao usuário.

### 3. Autenticação e Permissões
Aqui está um exemplo de como configurar a autenticação e autorizar o acesso ao Google Docs e Google Drive:

```javascript
let CLIENT_ID = 'YOUR_CLIENT_ID.apps.googleusercontent.com';  // Substitua pelo seu CLIENT_ID
let API_KEY = 'YOUR_API_KEY';  // Substitua pelo seu API_KEY

let DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest", 
                      "https://docs.googleapis.com/$discovery/rest?version=v1"];

let SCOPES = "https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/documents";

function handleClientLoad() {
  gapi.load('client:auth2', initClient);
}

function initClient() {
  gapi.client.init({
    apiKey: API_KEY,
    clientId: CLIENT_ID,
    discoveryDocs: DISCOVERY_DOCS,
    scope: SCOPES
  }).then(() => {
    // Verifica se o usuário já está autenticado
    gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

    updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());

    document.getElementById('authorize_button').onclick = handleAuthClick;
    document.getElementById('signout_button').onclick = handleSignoutClick;
  });
}

function handleAuthClick(event) {
  gapi.auth2.getAuthInstance().signIn();
}

function handleSignoutClick(event) {
  gapi.auth2.getAuthInstance().signOut();
}

function updateSigninStatus(isSignedIn) {
  if (isSignedIn) {
    // Permitir salvar no Google Docs
  } else {
    // Pedir ao usuário para autenticar
  }
}
```

### 4. Criar e Salvar o Documento no Google Docs
Uma vez autenticado, você pode criar e salvar o conteúdo do `textarea` no Google Docs com a API. Aqui está como você faria isso:

```javascript
function saveToGoogleDocs(textContent) {
  // Cria um novo documento no Google Docs
  gapi.client.docs.documents.create({
    title: 'Novo Documento',
  }).then((response) => {
    const documentId = response.result.documentId;

    // Atualiza o conteúdo do documento com o texto do textarea
    return gapi.client.docs.documents.batchUpdate({
      documentId: documentId,
      requests: [
        {
          insertText: {
            location: {
              index: 1, // Insere no início do documento
            },
            text: textContent, // Texto do textarea
          }
        }
      ]
    });
  }).then((response) => {
    console.log("Documento criado e salvo no Google Docs");
  }, (err) => {
    console.error("Erro ao criar documento no Google Docs", err);
  });
}
```

### 5. Conectando o `textarea` ao processo de salvamento
Você pode capturar o conteúdo do `textarea` e, quando o usuário clicar em "Salvar no Google Docs", chamar a função para salvar no Google Docs:

```javascript
document.getElementById('save_button').onclick = function() {
  let textContent = document.getElementById('textarea').value;
  saveToGoogleDocs(textContent);
};
```

### 6. HTML de exemplo:
Aqui está como ficaria seu HTML com botões para autenticar e salvar o conteúdo no Google Docs:

```html
<textarea id="textarea"></textarea>
<button id="authorize_button">Autorizar Google Docs</button>
<button id="signout_button">Sair</button>
<button id="save_button">Salvar no Google Docs</button>

<script async defer src="https://apis.google.com/js/api.js" onload="handleClientLoad()"></script>
```

### 7. Conclusão
Esse exemplo básico mostra como integrar a API do Google Docs e Google Drive em seu projeto para salvar o conteúdo de um `textarea` em um documento. Dependendo do seu caso de uso, você pode precisar expandir essa solução para lidar com erros, permitir a escolha de arquivos existentes, etc.


#################################
##### SALVAR NO GOOGLE DOCS #####
#################################






#################################
Usar o login do google para autenticar usuários de uma página e permitir que eles salvem os arquivos gerados nesse ambiente
#################################

Sim, é possível usar o login do Google (Google Sign-In) para autenticar usuários em uma página da web e permitir que eles salvem arquivos em suas contas do Google, como no Google Drive. Isso pode ser feito utilizando a **Google Identity Platform** para autenticação e a **Google Drive API** para manipulação de arquivos nas contas dos usuários.

Aqui está uma visão geral de como você pode fazer isso:

### 1. **Autenticação com Google Sign-In**

O **Google Sign-In** é uma maneira rápida de permitir que os usuários façam login usando suas contas do Google. Você pode adicionar essa funcionalidade ao seu site seguindo estas etapas:

#### Passos:
- **Crie um projeto no Google Cloud**:
  - Acesse o [Google Cloud Console](https://console.cloud.google.com/).
  - Crie um novo projeto.
  - Ative as **APIs do Google Identity** para autenticação e, se necessário, a **Google Drive API** para salvar arquivos no Google Drive.

- **Configure as credenciais OAuth 2.0**:
  - No Google Cloud Console, acesse **APIs e Serviços > Credenciais**.
  - Crie **Credenciais OAuth 2.0** e obtenha a **Client ID**.
  - Defina os **URIs de redirecionamento** autorizados (URLs para onde o Google deve redirecionar após a autenticação).

- **Adicione o botão de login do Google** ao seu site:
  Inclua o botão de login em seu site usando o script do Google:

  ```html
  <meta name="google-signin-client_id" content="YOUR_CLIENT_ID.apps.googleusercontent.com">
  <script src="https://apis.google.com/js/platform.js" async defer></script>
  <div class="g-signin2" data-onsuccess="onSignIn"></div>
  ```

- **Trate o login no JavaScript**:
  Você precisa implementar a função `onSignIn()` para manipular o login do usuário.

  ```javascript
  function onSignIn(googleUser) {
      var profile = googleUser.getBasicProfile();
      console.log('ID: ' + profile.getId()); // ID do usuário Google.
      console.log('Name: ' + profile.getName());
      console.log('Email: ' + profile.getEmail());
  }
  ```

### 2. **Salvando arquivos no Google Drive**

Depois que o usuário estiver autenticado, você pode usar a **Google Drive API** para permitir que eles salvem arquivos no Google Drive diretamente do seu site.

#### Passos para integrar a Google Drive API:
- **Ative a Google Drive API**:
  No Google Cloud Console, ative a **Google Drive API** para seu projeto.

- **Solicite permissões adequadas**:
  Além de autenticar o usuário, será necessário solicitar permissões adicionais para acessar e salvar arquivos no Google Drive. Isso envolve expandir o escopo da autenticação para incluir permissões relacionadas ao Google Drive.

  Exemplo de escopo:
  ```javascript
  scope: 'https://www.googleapis.com/auth/drive.file'
  ```

- **Usar a API para upload de arquivos**:
  Você pode enviar arquivos para o Google Drive usando a **Google Drive API**. Por exemplo:

  ```javascript
  function uploadFileToGoogleDrive(authToken) {
      var fileMetadata = {
          'name': 'sample.txt'
      };
      var media = {
          mimeType: 'text/plain',
          body: 'Hello, World!'
      };
      var request = gapi.client.drive.files.create({
          resource: fileMetadata,
          media: media,
          fields: 'id',
          auth: authToken
      });
      
      request.execute(function(file) {
          console.log('File ID: ', file.id);
      });
  }
  ```

### 3. **Fluxo de Trabalho Completo**

1. O usuário clica no botão "Login com Google".
2. O Google Sign-In autentica o usuário e retorna um **token de acesso**.
3. Você solicita as permissões do Google Drive para o usuário (ex.: escopo `https://www.googleapis.com/auth/drive.file`).
4. Usando o **token de acesso**, você chama a **Google Drive API** para enviar arquivos para a conta do usuário.

### Recursos Úteis:
- [Documentação da API Google Sign-In](https://developers.google.com/identity/sign-in/web/sign-in)
- [Guia da API Google Drive](https://developers.google.com/drive/api/v3/about-sdk)

### Considerações Finais:
- **Segurança**: Sempre armazene tokens de autenticação de forma segura e implemente medidas de segurança adequadas.
- **Escopos de permissão**: Solicite apenas os escopos necessários para evitar preocupações com privacidade e melhorar a experiência do usuário.

Com essas ferramentas, você pode integrar a autenticação do Google e permitir que os usuários salvem arquivos no Google Drive diretamente pela sua aplicação.



#################################
Usar o login do google para autenticar usuários de uma página e permitir que eles salvem os arquivos gerados nesse ambiente
#################################
